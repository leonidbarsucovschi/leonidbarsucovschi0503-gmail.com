package org.apache.jsp.recordslib.script;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import ro.uti.jpf.taglib.records.RecordsConst;
import ro.uti.jpf.base.composite.util.CompositePresentationConst;

public final class records_005fjs_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static java.util.List _jspx_dependants;

  public Object getDependants() {
    return _jspx_dependants;
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    JspFactory _jspxFactory = null;
    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;


    try {
      _jspxFactory = JspFactory.getDefaultFactory();
      response.setContentType("text/javascript; charset=iso-8859-2");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function RecordBean() {\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("RecordBean.prototype.getRecordID = function() {\r\n");
      out.write("    alert(\"recordbean:getRecordID\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function Records(id, prefix) {\r\n");
      out.write("    /* the ID that unique identifies the list of records */\r\n");
      out.write("    this.theID = id;\r\n");
      out.write("\r\n");
      out.write("    /* the prefix to be used for all CSS classes */\r\n");
      out.write("    this.stylesPrefix = prefix;\r\n");
      out.write("\r\n");
      out.write("    /* the list with records; each element is a RecordBean \"instance\" */\r\n");
      out.write("    this.recordsList = new Array();\r\n");
      out.write("\r\n");
      out.write("    /* the index of the record that is edited; if -1 a new record is added */\r\n");
      out.write("    this.currentRecordIdx = null;\r\n");
      out.write("\r\n");
      out.write("    /* Specifies if form should be displayed at top or at bottom (default)\r\n");
      out.write("    when a new record is edited. Since v2.0.2. */\r\n");
      out.write("    this.showAddFormAtTop = true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function __Records() {}\r\n");
      out.write("__Records.prototype = Records.prototype;\r\n");
      out.write("__Records.prototype.Records = Records;\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.getID = function() {\r\n");
      out.write("    return this.theID;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.getCurrentRecordIdx = function() {\r\n");
      out.write("    return this.currentRecordIdx;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.isEditMode = function() {\r\n");
      out.write("    return this.currentRecordIdx != null;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.getStyleClass = function(name) {\r\n");
      out.write("    return this.stylesPrefix + name;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.createRecordBeanInstance = function() {\r\n");
      out.write("    alert(\"records:crateRecordBeanInstance\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.addRecordBean = function(record) {\r\n");
      out.write("    this.recordsList.push(record);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.getRecordBean = function(recordIdx) {\r\n");
      out.write("    return this.recordsList[recordIdx];\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.getRecordIdxCellElm = function(recordIdx) {\r\n");
      out.write("    return document.getElementById(\"");
      out.print(RecordsConst.RECORD_IDX_ELM_ID_PREFIX);
      out.write("\"\r\n");
      out.write("            + this.theID + recordIdx);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.getRecordCheckboxElm = function(recordIdx) {\r\n");
      out.write("    return document.getElementById(\"");
      out.print(RecordsConst.RECORD_ID_ELM_ID_PREFIX);
      out.write("\"\r\n");
      out.write("            + this.theID + recordIdx);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.getFormRowElm = function() {\r\n");
      out.write("    return document.getElementById(\"");
      out.print(RecordsConst.FORM_ELEMENTS_ELM_ID_PREFIX);
      out.write("\"\r\n");
      out.write("            + this.theID);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.getRecordRowElm = function(recordIdx) {\r\n");
      out.write("    return document.getElementById(\"");
      out.print(RecordsConst.RECORD_PROPERTIES_ELM_ID_PREFIX);
      out.write("\"\r\n");
      out.write("            + this.theID + recordIdx);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.getFilterRowElm = function() {\r\n");
      out.write("    return document.getElementById(\"");
      out.print(RecordsConst.FILTER_ELEMENTS_ELM_ID_PREFIX);
      out.write("\"\r\n");
      out.write("            + this.theID)\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.onChangeCurrentPage = function(pageIdx) {\r\n");
      out.write("    var elm = document.getElementById(this.theID + \"");
      out.print(RecordsConst.PARAM_CURRENT_PAGE_IDX);
      out.write("\");\r\n");
      out.write("\r\n");
      out.write("    if (elm == null) {\r\n");
      out.write("        return;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    elm.value = \"\" + pageIdx;\r\n");
      out.write("    this.navigationChanged();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.onChangeRecordsPerPage = function(recordsPerPage) {\r\n");
      out.write("    var elm = document.getElementById(this.theID + \"");
      out.print(RecordsConst.PARAM_RECORDS_PER_PAGE);
      out.write("\");\r\n");
      out.write("\r\n");
      out.write("    if (elm == null) {\r\n");
      out.write("        return;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    elm.value = \"\" + recordsPerPage;\r\n");
      out.write("    this.navigationChanged();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.onChangeSortCriteria = function(sortKey) {\r\n");
      out.write("    var sortKeyElm = document.getElementById(this.theID + \"");
      out.print(RecordsConst.PARAM_SORT_KEY);
      out.write("\");\r\n");
      out.write("    var sortTypeElm = document.getElementById(this.theID + \"");
      out.print(RecordsConst.PARAM_SORT_TYPE);
      out.write("\");\r\n");
      out.write("\r\n");
      out.write("    if ((sortKeyElm == null) || (sortTypeElm == null)) {\r\n");
      out.write("        return;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (sortKeyElm.value == sortKey) {\r\n");
      out.write("        sortTypeElm.value = sortTypeElm.value == \"true\" ? \"false\" : \"true\";\r\n");
      out.write("    } else {\r\n");
      out.write("        sortKeyElm.value = sortKey;\r\n");
      out.write("        sortTypeElm.value = \"true\";\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    this.navigationChanged();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.onToggleFilterFormVisibility = function() {\r\n");
      out.write("    var elm = document.getElementById(this.theID + \"");
      out.print(RecordsConst.PARAM_FILTER_FORM_VISIBILITY);
      out.write("\");\r\n");
      out.write("    var filterRowElm = this.getFilterRowElm();\r\n");
      out.write("\r\n");
      out.write("    if ((elm == null) || (filterRowElm == null)) {\r\n");
      out.write("        return;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    elm.value = elm.value == \"true\" ? \"false\" : \"true\";\r\n");
      out.write("\r\n");
      out.write("    filterRowElm.className = this.getStyleClass(elm.value == \"true\"\r\n");
      out.write("            ? \"records-filter-row\" : \"records-hidden\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.navigationChanged = function() {\r\n");
      out.write("    alert(\"records:navigationChanged\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.isRecordSelected = function(recordIdx) {\r\n");
      out.write("    return this.getRecordCheckboxElm(recordIdx).checked;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.selectRecord = function(recordIdx, select) {\r\n");
      out.write("    var rowElm = this.getRecordRowElm(recordIdx);\r\n");
      out.write("\r\n");
      out.write("    var cs = this.getStyleClass(recordIdx % 2 == 0 ? \"records-row-even\" : \"records-row-odd\")\r\n");
      out.write("          + (select ? (\" \" + this.getStyleClass(\"records-row-selected\")) : \"\");\r\n");
      out.write("\r\n");
      out.write("    rowElm.className = this.getStyleClass(recordIdx % 2 == 0 ? \"records-row-even\" : \"records-row-odd\")\r\n");
      out.write("          + (select ? (\" \" + this.getStyleClass(\"records-row-selected\")) : \"\");\r\n");
      out.write("\r\n");
      out.write("    this.getRecordIdxCellElm(recordIdx).className =\r\n");
      out.write("            this.getStyleClass(\"records-row-idx-cell\")\r\n");
      out.write("                    + (select ? (\" \" + this.getStyleClass(\"records-row-idx-cell-selected\")) : \"\");\r\n");
      out.write("\r\n");
      out.write("    this.getRecordCheckboxElm(recordIdx).checked = select;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.toggleRecordSelection = function(recordIdx) {\r\n");
      out.write("    this.selectRecord(recordIdx, !this.isRecordSelected(recordIdx));\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.onSelectAll = function() {\r\n");
      out.write("    for (var i = 0; i < this.recordsList.length; i++) {\r\n");
      out.write("        this.selectRecord(i, true);\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.onToggleSelection = function() {\r\n");
      out.write("    for (var i = 0; i < this.recordsList.length; i++) {\r\n");
      out.write("        this.toggleRecordSelection(i);\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.getSelectedCount = function() {\r\n");
      out.write("    var count = 0;\r\n");
      out.write("\r\n");
      out.write("    for (var i = 0; i < this.recordsList.length; i++) {\r\n");
      out.write("        if (this.isRecordSelected(i)) {\r\n");
      out.write("            count++;\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return count;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.onFilter = function() {\r\n");
      out.write("    alert(\"records:onFilter\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.onRefresh = function() {\r\n");
      out.write("    alert(\"records:onRefresh\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.onAdd = function() {\r\n");
      out.write("    this.enterEditMode(-1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.onEdit = function(recordIdx) {\r\n");
      out.write("    this.enterEditMode(recordIdx);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.enterEditMode = function(recordIdx) {\r\n");
      out.write("    if (recordIdx != -1) {\r\n");
      out.write("        this.changeRecordRowElmVisibility(recordIdx, false);\r\n");
      out.write("    }\r\n");
      out.write("\t\r\n");
      out.write("\tvar editModeHiddenInput = document.getElementById(\r\n");
      out.write("\t\t\"");
      out.print(CompositePresentationConst.EDIT_MODE_ID);
      out.write("\");\r\n");
      out.write("\teditModeHiddenInput.value = \"true\";\r\n");
      out.write("\r\n");
      out.write("\t__invocationArray.addTempHandler(new Invoker(this, this.onSave, new Array(null, false)));\r\n");
      out.write("\r\n");
      out.write("    this.positionFormRowElm(recordIdx);\r\n");
      out.write("    this.currentRecordIdx = recordIdx;\r\n");
      out.write("\t\r\n");
      out.write("\ttry {\r\n");
      out.write("        recordIdx == -1 ? this.resetForm() : this.populateForm(recordIdx);\r\n");
      out.write("\t} catch (err) {\r\n");
      out.write("\t\talert(err);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("    this.getFormRowElm().className = this.getStyleClass(\"records-form-row-\" \r\n");
      out.write("\t\t+ (recordIdx%2==0?\"even\":\"odd\"));\r\n");
      out.write("\r\n");
      out.write("    this.setFormFocus();\r\n");
      out.write("    this.showHideButtons();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.changeRecordRowElmVisibility = function(recordIdx, visible) {\r\n");
      out.write("    var recordRowElm = this.getRecordRowElm(recordIdx);\r\n");
      out.write("\r\n");
      out.write("    if (!visible) {\r\n");
      out.write("        recordRowElm.recordsPrevClassName = recordRowElm.className;\r\n");
      out.write("        recordRowElm.className = this.getStyleClass(\"records-hidden\");\r\n");
      out.write("    } else {\r\n");
      out.write("        recordRowElm.className = recordRowElm.recordsPrevClassName;\r\n");
      out.write("        recordRowElm.recordsPrevClassName = null;\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.positionFormRowElm = function(recordIdx) {\r\n");
      out.write("    var formRowElm = this.getFormRowElm();\r\n");
      out.write("\r\n");
      out.write("\tif (recordIdx != -1) {\r\n");
      out.write("        formRowElm.parentNode.insertBefore(formRowElm,\r\n");
      out.write("                this.getRecordRowElm(recordIdx));\r\n");
      out.write("    } else {\r\n");
      out.write("        if (this.showAddFormAtTop && (this.recordsList.length > 0)) {\r\n");
      out.write("            formRowElm.parentNode.insertBefore(formRowElm,\r\n");
      out.write("                    this.getRecordRowElm(0));\r\n");
      out.write("        } else {\r\n");
      out.write("            formRowElm.parentNode.appendChild(formRowElm);\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.exitEditMode = function() {\r\n");
      out.write("    if (this.currentRecordIdx != -1) {\r\n");
      out.write("        this.changeRecordRowElmVisibility(this.currentRecordIdx, true);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\tvar editModeHiddenInput = document.getElementById(\"");
      out.print(CompositePresentationConst.EDIT_MODE_ID);
      out.write("\");\r\n");
      out.write("\teditModeHiddenInput.value = \"false\";\r\n");
      out.write("\r\n");
      out.write("\t__invocationArray.removeTempHandler(new Invoker(this, this.onSave, new Array(null, false)));\r\n");
      out.write("\r\n");
      out.write("    this.currentRecordIdx = null;\r\n");
      out.write("\r\n");
      out.write("    this.getFormRowElm().className = this.getStyleClass(\"records-hidden\");\r\n");
      out.write("\r\n");
      out.write("    this.resetForm();\r\n");
      out.write("    this.showHideButtons();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.showHideButtons = function() {\r\n");
      out.write("    document.getElementById(\"");
      out.print(RecordsConst.SELECTION_BUTTONS_ELM_ID_PREFIX);
      out.write("\"\r\n");
      out.write("            + this.theID).className = this.isEditMode()\r\n");
      out.write("                    ? this.getStyleClass(\"records-hidden\") : \"\";\r\n");
      out.write("\r\n");
      out.write("    document.getElementById(\"");
      out.print(RecordsConst.NAVIGATION_BUTTONS_ELM_ID_PREFIX);
      out.write("\"\r\n");
      out.write("            + this.theID).className = this.isEditMode()\r\n");
      out.write("                    ? this.getStyleClass(\"records-hidden\") : \"\";\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("   document.getElementById(\"");
      out.print(RecordsConst.EDITMODE_BUTTONS_ELM_ID_PREFIX);
      out.write("\"\r\n");
      out.write("            + this.theID).className = this.isEditMode()\r\n");
      out.write("                    ? \"\" : this.getStyleClass(\"records-hidden\");\r\n");
      out.write("   \r\n");
      out.write("    if (this.isEditMode()) {\r\n");
      out.write("        document.getElementById(\"");
      out.print(RecordsConst.DELETE_BUTTON_PARENT_ELM_ID);
      out.write("\").className =\r\n");
      out.write("                this.currentRecordIdx == -1 ? \"composite-hidden\" : \"\";\t\t\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.populateForm = function(recordIdx) {\r\n");
      out.write("    alert(\"records:populateForm\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.setFormFocus = function() {\r\n");
      out.write("    alert(\"records:setFormFocus\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.resetForm = function(recordIdx) {\r\n");
      out.write("    alert(\"records:resetForm\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.onSave = function() {\r\n");
      out.write("    alert(\"records:onSave\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.onDelete = function(recordIdx) {\r\n");
      out.write("    alert(\"records:onDelete\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.onCancel = function() {\r\n");
      out.write("    this.exitEditMode();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("Records.prototype.onDeleteSelected = function() {\r\n");
      out.write("    alert(\"records:onDeleteSelected\");\r\n");
      out.write("}\r\n");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          out.clearBuffer();
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
      }
    } finally {
      if (_jspxFactory != null) _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
