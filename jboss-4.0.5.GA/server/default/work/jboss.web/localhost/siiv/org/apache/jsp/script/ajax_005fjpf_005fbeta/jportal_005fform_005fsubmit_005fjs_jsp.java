package org.apache.jsp.script.ajax_005fjpf_005fbeta;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class jportal_005fform_005fsubmit_005fjs_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static java.util.List _jspx_dependants;

  public Object getDependants() {
    return _jspx_dependants;
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    JspFactory _jspxFactory = null;
    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;


    try {
      _jspxFactory = JspFactory.getDefaultFactory();
      response.setContentType("text/javascript; charset=iso-8859-2");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("var JPF_FORM_SUBMIT_BEST      = 0x00; /* AJAX if possible */\r\n");
      out.write("var JPF_FORM_SUBMIT_NORMAL    = 0x01; /* standard way, using submit() method */\r\n");
      out.write("var JPF_FORM_SUBMIT_AJAX      = 0x02; /* always AJAX, failes otherwise */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function JpfFormSubmit(formElmOrId) {\r\n");
      out.write("    this.formElm = (typeof(formElmOrId) == \"string\")\r\n");
      out.write("            ? document.getElementById(formElmOrId) : formElmOrId;\r\n");
      out.write("\r\n");
      out.write("    this.submitMode = JPF_FORM_SUBMIT_BEST;\r\n");
      out.write("\r\n");
      out.write("    this.submitFunction = this.formElm.submit;\r\n");
      out.write("    this.callOnSubmit = true;\r\n");
      out.write("    this.formAction = this.formElm.action;\r\n");
      out.write("    this.formEncoding = this.getFormBestEncoding();\r\n");
      out.write("    this.formTarget = this.formElm.target;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("JpfFormSubmit.prototype.setSubmitFunction = function(value) {\r\n");
      out.write("    this.submitFunction = value;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("JpfFormSubmit.prototype.setCallOnSubmit = function(value) {\r\n");
      out.write("    this.callOnSubmit = value;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("JpfFormSubmit.prototype.setAction = function(value) {\r\n");
      out.write("    this.formAction = value;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("JpfFormSubmit.prototype.setTarget = function(value) {\r\n");
      out.write("    this.formTarget = value;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("JpfFormSubmit.prototype.setSubmitMode = function(value) {\r\n");
      out.write("    this.submitMode = value;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("JpfFormSubmit.prototype.submit = function() {\r\n");
      out.write("    var normalSubmit = (this.submitMode == JPF_FORM_SUBMIT_NORMAL);\r\n");
      out.write("    var canUseAjax = this.formElementsCanBeEncoded();\r\n");
      out.write("\r\n");
      out.write("    if (this.submitMode == JPF_FORM_SUBMIT_AJAX) {\r\n");
      out.write("        if (!canUseAjax) {\r\n");
      out.write("            throw new \"form cannot be submitted using AJAX technology\";\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (this.submitMode == JPF_FORM_SUBMIT_BEST) {\r\n");
      out.write("        normalSubmit = !canUseAjax;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (this.callOnSubmit) {\r\n");
      out.write("        if (typeof(this.formElm.onsubmit) == \"function\") {\r\n");
      out.write("            if (!this.formElm.onsubmit()) {\r\n");
      out.write("                return true;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return normalSubmit ? this.submitFormUsingNormalWay()\r\n");
      out.write("            : this.submitFormUsingAjax();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("JpfFormSubmit.prototype.submitFormUsingNormalWay = function() {\r\n");
      out.write("    this.formElm.action = this.formAction;\r\n");
      out.write("    this.formElm.encoding = this.formEncoding;\r\n");
      out.write("    this.formElm.target = this.formTarget;\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    this.formElm.jpfFormSubmit = this.submitFunction;\r\n");
      out.write("    this.formElm.jpfFormSubmit();\r\n");
      out.write("\r\n");
      out.write("    return true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("JpfFormSubmit.prototype.submitFormUsingAjax = function() {\r\n");
      out.write("    var postData = this.encodeFormData();\r\n");
      out.write("\r\n");
      out.write("    if (postData == null) {\r\n");
      out.write("        throw new \"form data cannot be encoded\";\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var httpRequest = new JpfHttpRequest(this.formAction, postData);\r\n");
      out.write("    var response = httpRequest.send();\r\n");
      out.write("\r\n");
      out.write("    if (response == null) {\r\n");
      out.write("        return false;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (this.formTarget.length > 0) {\r\n");
      out.write("        var wnd = window.frames[this.formTarget];\r\n");
      out.write("    } else {\r\n");
      out.write("        var wnd = window;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    wnd.document.open();\r\n");
      out.write("    wnd.document.write(response);\r\n");
      out.write("    wnd.document.close();\r\n");
      out.write("\r\n");
      out.write("    return true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("JpfFormSubmit.prototype.formElementsCanBeEncoded = function() {\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    return !this.formContainsFiles();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("JpfFormSubmit.prototype.formContainsFiles = function() {\r\n");
      out.write("    for (var i = 0; i < this.formElm.elements.length; i++) {\r\n");
      out.write("        if (this.formElm.elements[i].type == \"file\") {\r\n");
      out.write("            if (JpfUtils.trim(this.formElm.elements[i].value).length > 0) {\r\n");
      out.write("                return true;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return false;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("JpfFormSubmit.prototype.encodeFormData = function() {\r\n");
      out.write("    var result = new String();\r\n");
      out.write("\r\n");
      out.write("    for (var i = 0; i < this.formElm.elements.length; i++) {\r\n");
      out.write("        var name = this.formElm.elements[i].name;\r\n");
      out.write("\r\n");
      out.write("        var isDisabled = typeof(this.formElm.elements[i].disabled) == \"boolean\"\r\n");
      out.write("                ? this.formElm.elements[i].disabled : true;\r\n");
      out.write("\r\n");
      out.write("        if ((name.length == 0) || isDisabled) {\r\n");
      out.write("            continue;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        var values = this.getFormElementValues(this.formElm.elements[i]);\r\n");
      out.write("\r\n");
      out.write("        if (values == null) {\r\n");
      out.write("            return null;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        while (values.length > 0) {\r\n");
      out.write("            result = result + ((result.length > 0) ? \"&\" : \"\")\r\n");
      out.write("                    + encodeURIComponent(name) + \"=\"\r\n");
      out.write("                    + encodeURIComponent(values.pop());\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return result;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("JpfFormSubmit.prototype.getFormElementValues = function(element) {\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    if ((element.type == \"hidden\") || (element.type == \"text\")\r\n");
      out.write("            || (element.type == \"password\") || (element.type == \"textarea\")) {\r\n");
      out.write("        return [element.value];\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    if ((element.type == \"checkbox\") || (element.type == \"radio\")) {\r\n");
      out.write("        return !element.checked ? new Array() : [element.value];\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    if ((element.type == \"select-one\") || (element.type == \"select-multiple\")) {\r\n");
      out.write("        return this.getSelectFormElementValues(element);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    if ((element.type == \"submit\") || (element.type == \"button\")) {\r\n");
      out.write("        return \"\";\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    if (element.type == \"file\") {\r\n");
      out.write("        if (JpfUtils.trim(element.value).length == 0) {\r\n");
      out.write("            return \"\";\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return null;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("JpfFormSubmit.prototype.getSelectFormElementValues = function(element) {\r\n");
      out.write("    var result = new Array();\r\n");
      out.write("\r\n");
      out.write("    if (element.type == \"select-multiple\") {\r\n");
      out.write("        for (var i = 0; i < element.options.length; i++) {\r\n");
      out.write("            if (element.options[i].selected) {\r\n");
      out.write("                result.push(element.options[i].value);\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    } else {\r\n");
      out.write("        if (element.selectedIndex >= 0) {\r\n");
      out.write("            result.push(element.options[element.selectedIndex].value);\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return result;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("JpfFormSubmit.prototype.getFormBestEncoding = function() {\r\n");
      out.write("    return this.formContainsFiles(this.formElm) ? \"multipart/form-data\"\r\n");
      out.write("            : \"application/x-www-form-urlencoded\";\r\n");
      out.write("}\r\n");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          out.clearBuffer();
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
      }
    } finally {
      if (_jspxFactory != null) _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
